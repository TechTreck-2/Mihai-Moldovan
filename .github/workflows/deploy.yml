name: Deploy Applications

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      client-changed: ${{ steps.changes.outputs.client }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
            client:
              - 'client/**'

  deploy-backend:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install Dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run Linting
        working-directory: ./backend
        run: npm run lint

      - name: Build Application
        working-directory: ./backend
        run: npm run build

      - name: Run Tests
        working-directory: ./backend
        run: npm test
        continue-on-error: true

      - name: Deploy to Railway
        working-directory: ./backend
        run: |
          npm install -g @railway/cli
          railway deploy
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  deploy-client:
    needs: detect-changes
    if: needs.detect-changes.outputs.client-changed == 'true'
    runs-on: ubuntu-latest
    outputs:
      deployment-url: ${{ steps.deploy.outputs.page_url }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install Dependencies
        working-directory: ./client
        run: npm ci

      - name: Build Application
        working-directory: ./client
        env:
          BACKEND_URL: ${{ github.event.client_payload.backend_url || vars.BACKEND_URL || secrets.BACKEND_URL || 'http://localhost:3000' }}
        run: |
          # Validate and ensure the backend URL has a protocol
          if [[ ! "$BACKEND_URL" =~ ^https?:// ]]; then
            echo "Warning: BACKEND_URL doesn't include protocol. Adding https://"
            BACKEND_URL="https://$BACKEND_URL"
          fi
          
          # Replace the placeholder with the actual backend URL
          echo "Before replacement:"
          cat src/environments/environment.github-pages.ts
          
          sed -i "s|BACKEND_URL_PLACEHOLDER|$BACKEND_URL|g" src/environments/environment.github-pages.ts
          
          echo "After replacement - Using backend URL: $BACKEND_URL"
          cat src/environments/environment.github-pages.ts
          
          npm run build:github

      - name: Create .nojekyll file
        run: touch ./client/dist/techtrek/browser/.nojekyll

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './client/dist/techtrek/browser'

  deploy-pages:
    if: needs.detect-changes.outputs.client-changed == 'true' && github.event_name != 'pull_request'
    needs: [detect-changes, deploy-client]
    runs-on: ubuntu-latest
    
    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    outputs:
      deployment-url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  take-screenshots:
    needs: [detect-changes, deploy-pages]
    if: needs.detect-changes.outputs.client-changed == 'true' && needs.deploy-pages.result == 'success'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install Client Dependencies (for Playwright)
        working-directory: ./client
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ./client
        run: npx playwright install --with-deps chromium

      - name: Wait for GitHub Pages deployment
        run: |
          echo "Waiting for GitHub Pages to be ready..."
          sleep 30
          timeout 300 bash -c 'until curl -f ${{ needs.deploy-pages.outputs.deployment-url }}; do sleep 10; done'

      - name: Create screenshots directory
        run: mkdir -p screenshots

      - name: Create screenshot script
        run: |
          cat << 'EOF' > take-screenshots.js
          const { chromium } = require('playwright');
          const fs = require('fs');
          const path = require('path');

          async function takeScreenshots() {
            const browser = await chromium.launch();
            const baseUrl = '${{ needs.deploy-pages.outputs.deployment-url }}';
            
            const pages = [
              {
                name: 'login',
                url: `${baseUrl}/login`,
                waitFor: '[data-cy="login-card"]',
                actions: []
              },
              {
                name: 'clocking',
                url: `${baseUrl}/clocking`,
                waitFor: '[data-cy="clocking-page"]',
                actions: [
                  async (page) => {
                    // Mock login by setting localStorage
                    await page.evaluate(() => {
                      localStorage.setItem('JWT_TOKEN', 'mock-jwt-token');
                      localStorage.setItem('CURRENT_USER', JSON.stringify({
                        id: 1,
                        username: 'demo@example.com',
                        email: 'demo@example.com'
                      }));
                    });
                  }
                ]
              },
              {
                name: 'holiday',
                url: `${baseUrl}/holiday`,
                waitFor: '.holiday-planner-container',
                actions: [
                  async (page) => {
                    // Mock login by setting localStorage
                    await page.evaluate(() => {
                      localStorage.setItem('JWT_TOKEN', 'mock-jwt-token');
                      localStorage.setItem('CURRENT_USER', JSON.stringify({
                        id: 1,
                        username: 'demo@example.com',
                        email: 'demo@example.com'
                      }));
                    });
                  }
                ]
              }
            ];

            const themes = ['light', 'dark'];

            for (const pageDef of pages) {
              for (const theme of themes) {
                const context = await browser.newContext({
                  viewport: { width: 1280, height: 720 },
                  colorScheme: theme
                });
                
                const page = await context.newPage();
                
                // Mock API responses
                await page.route('**/api/**', route => {
                  const url = route.request().url();
                  if (url.includes('/clockings')) {
                    route.fulfill({
                      status: 200,
                      contentType: 'application/json',
                      body: JSON.stringify([])
                    });
                  } else if (url.includes('/holidays')) {
                    route.fulfill({
                      status: 200,
                      contentType: 'application/json',
                      body: JSON.stringify([
                        {
                          id: 1,
                          holidayName: 'Summer Vacation',
                          startDate: '2024-07-15',
                          endDate: '2024-07-25'
                        }
                      ])
                    });
                  } else {
                    route.fulfill({
                      status: 200,
                      contentType: 'application/json',
                      body: JSON.stringify({})
                    });
                  }
                });

                // Execute pre-actions
                for (const action of pageDef.actions) {
                  await action(page);
                }

                // Navigate to page
                await page.goto(pageDef.url);
                
                // Set theme preference
                await page.evaluate((themeValue) => {
                  localStorage.setItem('theme-preference', themeValue);
                  document.documentElement.setAttribute('data-theme', themeValue);
                  if (themeValue === 'dark') {
                    document.documentElement.classList.add('dark-theme');
                  } else {
                    document.documentElement.classList.remove('dark-theme');
                  }
                }, theme);

                // Wait for page to load
                try {
                  await page.waitForSelector(pageDef.waitFor, { timeout: 15000 });
                  await page.waitForTimeout(2000); // Additional wait for animations
                } catch (error) {
                  console.log(`Warning: Could not find selector ${pageDef.waitFor} for ${pageDef.name}-${theme}`);
                  await page.waitForTimeout(3000); // Still wait a bit
                }

                // Hide scrollbars for cleaner screenshots
                await page.addStyleTag({
                  content: `
                    ::-webkit-scrollbar { display: none; }
                    * { scrollbar-width: none; }
                    body { overflow: hidden; }
                  `
                });

                const screenshotPath = `screenshots/${pageDef.name}-${theme}.png`;
                await page.screenshot({ 
                  path: screenshotPath,
                  fullPage: false,
                  clip: { x: 0, y: 0, width: 1280, height: 720 }
                });
                
                console.log(`Screenshot saved: ${screenshotPath}`);
                await context.close();
              }
            }

            await browser.close();
          }

          takeScreenshots().catch(console.error);
          EOF

      - name: Take screenshots
        working-directory: ./client
        run: node ../take-screenshots.js

      - name: Update README with screenshots
        run: |
          cat << 'EOF' > update-readme.js
          const fs = require('fs');
          
          const readmePath = 'README.md';
          let readme = fs.readFileSync(readmePath, 'utf8');
          
          const screenshotSection = `
          ## Screenshots

          ### Login Page
          | Light Mode | Dark Mode |
          |------------|-----------|
          | ![Login Light](screenshots/login-light.png) | ![Login Dark](screenshots/login-dark.png) |

          ### Clock In/Out Page
          | Light Mode | Dark Mode |
          |------------|-----------|
          | ![Clocking Light](screenshots/clocking-light.png) | ![Clocking Dark](screenshots/clocking-dark.png) |

          ### Holiday Planning Page
          | Light Mode | Dark Mode |
          |------------|-----------|
          | ![Holiday Light](screenshots/holiday-light.png) | ![Holiday Dark](screenshots/holiday-dark.png) |

          *Screenshots are automatically updated on every client code change.*

          `;
          
          const screenshotStartMarker = '## Screenshots';
          const nextSectionMarkers = ['## Setup and Running', '## Development', '## Features', '## API Documentation', '## Contributing', '## License'];
          
          let startIndex = readme.indexOf(screenshotStartMarker);
          if (startIndex !== -1) {
            let endIndex = readme.length;
            
            for (const marker of nextSectionMarkers) {
              const markerIndex = readme.indexOf(marker, startIndex + screenshotStartMarker.length);
              if (markerIndex !== -1 && markerIndex < endIndex) {
                endIndex = markerIndex;
              }
            }
            
            readme = readme.substring(0, startIndex) + readme.substring(endIndex);
          }
          
          // Find insertion point (before "Setup and Running" or at the end)
          let insertIndex = readme.indexOf('## Setup and Running');
          if (insertIndex === -1) {
            insertIndex = readme.indexOf('## Development');
          }
          if (insertIndex === -1) {
            insertIndex = readme.indexOf('## Features');
          }
          if (insertIndex === -1) {
            // Insert before the last section or at the end
            insertIndex = readme.length;
          }
          
          // Insert the screenshot section
          readme = readme.substring(0, insertIndex) + screenshotSection + '\n' + readme.substring(insertIndex);
          
          fs.writeFileSync(readmePath, readme);
          console.log('README.md updated with screenshots');
          EOF
          
          node update-readme.js

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add all screenshots and README changes
          git add screenshots/ README.md
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update screenshots and README [skip ci]"
            git push
          fi

      - name: Upload screenshots as artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: screenshots
          path: screenshots/
          retention-days: 30

# Grant GITHUB_TOKEN the necessary permissions
permissions:
  contents: write
  pages: write
  id-token: write
