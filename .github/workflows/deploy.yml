name: Deploy Applications

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      client-changed: ${{ steps.changes.outputs.client }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
            client:
              - 'client/**'

  deploy-backend:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install Dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run Linting
        working-directory: ./backend
        run: npm run lint

      - name: Build Application
        working-directory: ./backend
        run: npm run build

      - name: Run Tests
        working-directory: ./backend
        run: npm test
        continue-on-error: true

      - name: Deploy to Railway
        working-directory: ./backend
        run: |
          npm install -g @railway/cli
          railway deploy
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  build-client:
    needs: detect-changes
    if: needs.detect-changes.outputs.client-changed == 'true'
    runs-on: ubuntu-latest
    outputs:
      deployment-url: ${{ steps.deploy.outputs.page_url }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install Dependencies
        working-directory: ./client
        run: npm ci

      - name: Build Application
        working-directory: ./client
        env:
          BACKEND_URL: ${{ github.event.client_payload.backend_url || vars.BACKEND_URL || secrets.BACKEND_URL || 'http://localhost:3000' }}
        run: |
          # Validate and ensure the backend URL has a protocol
          if [[ ! "$BACKEND_URL" =~ ^https?:// ]]; then
            echo "Warning: BACKEND_URL doesn't include protocol. Adding https://"
            BACKEND_URL="https://$BACKEND_URL"
          fi
          
          # Replace the placeholder with the actual backend URL
          echo "Before replacement:"
          cat src/environments/environment.github-pages.ts
          
          sed -i "s|BACKEND_URL_PLACEHOLDER|$BACKEND_URL|g" src/environments/environment.github-pages.ts
          
          echo "After replacement - Using backend URL: $BACKEND_URL"
          cat src/environments/environment.github-pages.ts
          
          npm run build:github

      - name: Create .nojekyll file
        run: touch ./client/dist/techtrek/browser/.nojekyll

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './client/dist/techtrek/browser'

  deploy-client:
    if: needs.detect-changes.outputs.client-changed == 'true' && github.event_name != 'pull_request'
    needs: [detect-changes, build-client]
    runs-on: ubuntu-latest
    
    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    outputs:
      deployment-url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  take-screenshots:
    needs: [detect-changes, deploy-client]
    if: needs.detect-changes.outputs.client-changed == 'true' && needs.deploy-client.result == 'success'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install Client Dependencies (for Playwright)
        working-directory: ./client
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ./client
        run: npx playwright install --with-deps chromium

      - name: Wait for GitHub Pages deployment
        run: |
          echo "Waiting for GitHub Pages to be ready..."
          sleep 30
          timeout 300 bash -c 'until curl -f ${{ needs.deploy-client.outputs.deployment-url }}; do sleep 10; done'

      - name: Take screenshots
        working-directory: ./client
        env:
          BASE_URL: ${{ needs.deploy-client.outputs.deployment-url }}
        run: node take-screenshots.js

      - name: Update README with screenshots
        working-directory: ./client
        run: node update-readme.js

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add all screenshots and README changes
          git add screenshots/ README.md
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update screenshots and README [skip ci]"
            git push
          fi

      - name: Upload screenshots as artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: screenshots
          path: screenshots/
          retention-days: 30

# Grant GITHUB_TOKEN the necessary permissions
permissions:
  contents: write
  pages: write
  id-token: write
