name: Deploy Applications

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      client-changed: ${{ steps.changes.outputs.client }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
            client:
              - 'client/**'

  deploy-backend:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Cache backend build
        uses: actions/cache@v4
        with:
          path: |
            backend/dist
            backend/.cache
          key: backend-build-${{ runner.os }}-${{ hashFiles('backend/package-lock.json') }}-${{ hashFiles('backend/src/**/*') }}
          restore-keys: |
            backend-build-${{ runner.os }}-${{ hashFiles('backend/package-lock.json') }}-
            backend-build-${{ runner.os }}-

      - name: Install Dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run Linting
        working-directory: ./backend
        run: npm run lint

      - name: Build Application
        working-directory: ./backend
        run: npm run build

      - name: Run Tests
        working-directory: ./backend
        run: npm test
        continue-on-error: true

      - name: Deploy to Railway
        working-directory: ./backend
        run: |
          npm install -g @railway/cli
          railway deploy
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  build-client:
    needs: detect-changes
    if: needs.detect-changes.outputs.client-changed == 'true'
    runs-on: ubuntu-latest
    outputs:
      deployment-url: ${{ steps.deploy.outputs.page_url }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Cache Angular build
        uses: actions/cache@v4
        with:
          path: |
            client/dist
            client/.angular/cache
            client/node_modules/.cache
          key: client-build-${{ runner.os }}-${{ hashFiles('client/package-lock.json') }}-${{ hashFiles('client/src/**/*', 'client/angular.json', 'client/tsconfig.json') }}
          restore-keys: |
            client-build-${{ runner.os }}-${{ hashFiles('client/package-lock.json') }}-
            client-build-${{ runner.os }}-

      - name: Install Dependencies
        working-directory: ./client
        run: npm ci

      - name: Build Application
        working-directory: ./client
        env:
          BACKEND_URL: ${{ github.event.client_payload.backend_url || vars.BACKEND_URL || secrets.BACKEND_URL || 'http://localhost:3000' }}
        run: |
          # Validate and ensure the backend URL has a protocol
          if [[ ! "$BACKEND_URL" =~ ^https?:// ]]; then
            echo "Warning: BACKEND_URL doesn't include protocol. Adding https://"
            BACKEND_URL="https://$BACKEND_URL"
          fi
          
          # Replace the placeholder with the actual backend URL
          echo "Before replacement:"
          cat src/environments/environment.github-pages.ts
          
          sed -i "s|BACKEND_URL_PLACEHOLDER|$BACKEND_URL|g" src/environments/environment.github-pages.ts
          
          echo "After replacement - Using backend URL: $BACKEND_URL"
          cat src/environments/environment.github-pages.ts
          
          npm run build:github

      - name: Create .nojekyll file
        run: touch ./client/dist/techtrek/browser/.nojekyll

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './client/dist/techtrek/browser'

  e2e-tests:
    needs: detect-changes
    if: needs.detect-changes.outputs.client-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Run Cypress E2E tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: client
          start: npm start
          wait-on: 'http://localhost:4200'
          wait-on-timeout: 180
          browser: chrome
          headed: false
          spec: cypress/e2e/**/*.cy.{js,jsx,ts,tsx}
        env:
          CYPRESS_VIDEO: 'false'

  component-tests:
    needs: detect-changes
    if: needs.detect-changes.outputs.client-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Run Cypress Component tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: client
          component: true
          browser: chrome
          headed: false
        env:
          CYPRESS_VIDEO: 'false'

  deploy-client:
    if: needs.detect-changes.outputs.client-changed == 'true' && github.event_name != 'pull_request' && needs.e2e-tests.result == 'success' && needs.component-tests.result == 'success'
    needs: [detect-changes, build-client, e2e-tests, component-tests]
    runs-on: ubuntu-latest
    
    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    outputs:
      deployment-url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  take-screenshots:
    needs: [detect-changes, deploy-client]
    if: needs.detect-changes.outputs.client-changed == 'true' && needs.deploy-client.result == 'success'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Cache screenshots
        uses: actions/cache@v4
        with:
          path: screenshots/
          key: screenshots-${{ runner.os }}-${{ hashFiles('client/src/**/*', 'scripts/take-screenshots.js') }}
          restore-keys: |
            screenshots-${{ runner.os }}-

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
            client/node_modules/.cache/playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('client/package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Install Client Dependencies (for Playwright)
        working-directory: ./client
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ./client
        run: |
          # Only install if not cached
          if [ ! -d ~/.cache/ms-playwright ]; then
            npx playwright install --with-deps chromium
          else
            echo "Playwright browsers found in cache"
            npx playwright install-deps chromium
          fi

      - name: Check if screenshots exist
        id: check-screenshots
        run: |
          if [ -d "screenshots" ] && [ "$(ls -A screenshots)" ]; then
            echo "screenshots-exist=true" >> $GITHUB_OUTPUT
            echo "Screenshots found in cache"
          else
            echo "screenshots-exist=false" >> $GITHUB_OUTPUT
            echo "No screenshots found, will generate new ones"
          fi

      - name: Wait for GitHub Pages deployment
        run: |
          echo "Waiting for GitHub Pages to be ready..."
          sleep 30
          timeout 300 bash -c 'until curl -f ${{ needs.deploy-client.outputs.deployment-url }}; do sleep 10; done'

      - name: Take screenshots
        working-directory: ./client
        env:
          BASE_URL: ${{ needs.deploy-client.outputs.deployment-url }}
        run: |
          echo "Taking screenshots with BASE_URL: $BASE_URL"
          echo "Current directory: $(pwd)"
          echo "Node version: $(node --version)"
          
          # Run screenshot generation with more verbose output
          node take-screenshots.js
          
          # Debug: List contents of screenshots directory
          echo "Screenshots created:"
          ls -la ../screenshots/ || echo "No screenshots directory found in parent"
          ls -la screenshots/ || echo "No screenshots directory found in client"
          
          # Show screenshot file sizes if they exist
          if [ -d "../screenshots" ]; then
            echo "Root screenshots directory contents:"
            find ../screenshots -name "*.png" -exec ls -lh {} \;
          fi

      - name: Update README with screenshots
        working-directory: ./client
        run: |
          echo "Updating README..."
          echo "Current directory: $(pwd)"
          echo "README.md location check:"
          ls -la ../README.md || echo "README.md not found in parent directory"
          
          node update-readme.js
          
          # Debug: Check if README was modified
          echo "README modification status:"
          git status ../README.md || echo "Could not check README status"
          
          echo "Git diff for README:"
          git diff ../README.md || echo "No changes to README or file not found"

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Force add screenshots even though they're in .gitignore
          git add -f screenshots/ README.md
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update screenshots and README [skip ci]"
            git push
          fi

      - name: Upload screenshots as artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: screenshots
          path: screenshots/
          retention-days: 30

# Grant GITHUB_TOKEN the necessary permissions
permissions:
  contents: write
  pages: write
  id-token: write
